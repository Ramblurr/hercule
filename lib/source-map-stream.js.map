{"version":3,"sources":["../src/source-map-stream.js"],"names":[],"mappings":";;;;;kBAmBwB,e;;AAnBxB;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEA,SAAS,YAAT,CAAsB,MAAtB,EAA8B,OAA9B,EAAuC;AACrC,MAAM,cAAc,OAAO,IAA3B;AACA,MAAM,gBAAgB,OAAO,MAA7B;;AAEA,MAAM,WAAW,CAAC,QAAQ,KAAR,CAAc,KAAd,KAAwB,EAAzB,EAA6B,MAA9C;AACA,MAAM,aAAa,CAAC,QAAQ,KAAR,CAAc,MAAd,KAAyB,CAAC,EAAD,CAA1B,EAAgC,CAAhC,EAAmC,MAAtD;;AAEA,MAAM,OAAO,cAAc,QAA3B;AACA,MAAM,SAAS,WAAW,CAAX,GAAe,UAAf,GAA4B,gBAAgB,UAA3D;;AAEA,SAAO,EAAE,UAAF,EAAQ,cAAR,EAAP;AACD;;AAEc,SAAS,eAAT,GAAmD;AAAA,MAA1B,aAA0B,yDAAV,QAAU;;AAChE,MAAM,WAAW,EAAjB;AACA,MAAI,SAAS;AACX,UAAM,CADK;AAEX,YAAQ;AAFG,GAAb;;AAKA,WAAS,SAAT,CAAmB,KAAnB,EAA0B,QAA1B,EAAoC,EAApC,EAAwC;AACtC,QAAM,UAAU,MAAM,OAAtB;AACA,QAAM,mBAAmB;AACvB,YAAM,MAAM,IADW;AAEvB,cAAQ,MAAM;AAFS,KAAzB;;AAKA,QAAI,CAAC,aAAL,EAAoB,OAAO,IAAP;;AAEpB,aAAS,IAAT,CAAc;AACZ,cAAQ,eAAK,QAAL,CAAc,eAAK,OAAL,CAAa,aAAb,CAAd,EAA2C,MAAM,MAAjD,CADI;AAEZ,gBAAU,gBAFE;AAGZ,iBAAW;AAHC,KAAd;AAKA,aAAS,aAAa,MAAb,EAAqB,OAArB,CAAT;;AAEA,SAAK,IAAL,CAAU,KAAV;AACA,WAAO,IAAP;AACD;;AAED,WAAS,KAAT,CAAe,EAAf,EAAmB;AACjB,QAAI,CAAC,aAAL,EAAoB,OAAO,IAAP;;AAEpB,QAAM,YAAY,IAAI,oBAAU,kBAAd,CAAiC,EAAE,MAAM,eAAK,QAAL,CAAc,SAAd,EAAyB,aAAzB,CAAR,EAAjC,CAAlB;AACA,qBAAE,OAAF,CAAU,QAAV,EAAoB,UAAC,GAAD;AAAA,aAAS,UAAU,UAAV,CAAqB,GAArB,CAAT;AAAA,KAApB;AACA,SAAK,IAAL,CAAU,WAAV,EAAuB,KAAK,KAAL,CAAW,UAAU,QAAV,EAAX,CAAvB;AACA,WAAO,IAAP;AACD;;AAED,SAAO,kBAAS,GAAT,CAAa,SAAb,EAAwB,KAAxB,CAAP;AACD","file":"source-map-stream.js","sourcesContent":["import path from 'path';\n\nimport _ from 'lodash';\nimport through2 from 'through2';\nimport sourceMap from 'source-map';\n\nfunction updateCursor(cursor, content) {\n  const currentLine = cursor.line;\n  const currentColumn = cursor.column;\n\n  const newLines = (content.match(/\\n/g) || []).length;\n  const newColumns = (content.match(/.*$/g) || [''])[0].length;\n\n  const line = currentLine + newLines;\n  const column = newLines > 0 ? newColumns : currentColumn + newColumns;\n\n  return { line, column };\n}\n\nexport default function SourceMapStream(generatedFile = 'string') {\n  const mappings = [];\n  let cursor = {\n    line: 1,\n    column: 0,\n  };\n\n  function transform(chunk, encoding, cb) {\n    const content = chunk.content;\n    const originalLocation = {\n      line: chunk.line,\n      column: chunk.column,\n    };\n\n    if (!generatedFile) return cb();\n\n    mappings.push({\n      source: path.relative(path.dirname(generatedFile), chunk.source),\n      original: originalLocation,\n      generated: cursor,\n    });\n    cursor = updateCursor(cursor, content);\n\n    this.push(chunk);\n    return cb();\n  }\n\n  function flush(cb) {\n    if (!generatedFile) return cb();\n\n    const generator = new sourceMap.SourceMapGenerator({ file: path.relative(__dirname, generatedFile) });\n    _.forEach(mappings, (map) => generator.addMapping(map));\n    this.emit('sourcemap', JSON.parse(generator.toString()));\n    return cb();\n  }\n\n  return through2.obj(transform, flush);\n}\n"]}