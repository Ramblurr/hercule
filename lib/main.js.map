{"version":3,"sources":["../src/main.js"],"names":[],"mappings":";;AAMA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAI,aAAJ;AACA,IAAI,aAAJ;;AAEA,IAAM,SAAS,mBAAS,YAAT,CAAsB;AACnC,WAAS,CACP;AACE,WAAO,CAAC,MAAD,EAAS,GAAT,CADT;AAEE,UAAM,MAFR;AAGE,UAAM;AAHR,GADO,EAMP;AACE,WAAO,CAAC,QAAD,EAAW,GAAX,CADT;AAEE,UAAM,QAFR;AAGE,UAAM,iBAHR;AAIE,aAAS;AAJX,GANO;;AAaP;AACE,WAAO,CAAC,cAAD,EAAiB,GAAjB,CADT;AAEE,UAAM,QAFR;AAGE,UAAM;AAHR,GAbO,EAkBP;AACE,WAAO,CAAC,WAAD,EAAc,GAAd,CADT;AAEE,UAAM,MAFR;AAGE,UAAM;AAHR,GAlBO,EAuBP;AACE,UAAM,UADR;AAEE,UAAM,QAFR;AAGE,UAAM;AAHR,GAvBO;AAD0B,CAAtB,CAAf;;AAiCA,IAAI;AACF,SAAO,OAAO,KAAP,CAAa,QAAQ,IAArB,CAAP;AACA,SAAO,KAAK,KAAZ,C;AACD,CAHD,CAGE,OAAO,GAAP,EAAY;AACZ,UAAQ,MAAR,CAAe,KAAf,sBAAwC,IAAI,OAA5C;AACA,UAAQ,IAAR,CAAa,CAAb;AACD;;AAGD,IAAI,KAAK,IAAT,EAAe;AACb,UAAQ,MAAR,CAAe,KAAf,CAAqB,+CAArB;AACA,UAAQ,MAAR,CAAe,KAAf,gBAAkC,OAAO,IAAP,CAAY,EAAE,YAAY,IAAd,EAAZ,EAAkC,SAAlC,EAAlC;AACA,UAAQ,IAAR;AACD;;AAGD,SAAS,IAAT,GAAgB;AACd,MAAI,oBAAJ;AACA,MAAI,qBAAJ;AACA,MAAI,eAAJ;AACA,MAAM,UAAU;AACd,aAAS,EADK;AAEd,gBAAY;AAFE,GAAhB;;AAKA,MAAI,KAAK,MAAL,KAAgB,CAApB,EAAuB;;AAErB,kBAAc,QAAQ,KAAtB;AACA,aAAY,KAAK,YAAjB;AACA,YAAQ,YAAR,GAAuB,KAAK,YAA5B;AACD,GALD,MAKO;;AAEL,aAAS,eAAK,SAAL,CAAe,KAAK,CAAL,CAAf,CAAT;AACA,kBAAc,aAAG,gBAAH,CAAoB,MAApB,EAA4B,EAAE,UAAU,MAAZ,EAA5B,CAAd;AACD;;AAED,MAAI,KAAK,MAAT,EAAiB;;AAEf,mBAAe,aAAG,iBAAH,CAAqB,KAAK,MAA1B,EAAkC,EAAE,UAAU,MAAZ,EAAlC,CAAf;AACA,YAAQ,UAAR,GAAqB,KAAK,MAA1B;AACD,GAJD,MAIO;;AAEL,mBAAe,QAAQ,MAAvB;AACA,YAAQ,UAAR,GAAqB,QAArB;AACD;;AAED,MAAM,aAAa,+BAAgB,MAAhB,EAAwB,OAAxB,CAAnB;;AAEA,aAAW,EAAX,CAAc,OAAd,EAAuB,UAAC,GAAD,EAAS;AAC9B,QAAI,KAAK,QAAL,KAAkB,UAAtB,EAAkC;AAChC,cAAQ,MAAR,CAAe,KAAf,CAAqB,KAAK,SAAL,CAAe,GAAf,CAArB;AACD,KAFD,MAEO;AACL,cAAQ,MAAR,CAAe,KAAf,iBAAmC,IAAI,OAAvC,UAAmD,IAAI,IAAvD;AACD;AACD,YAAQ,IAAR,CAAa,CAAb;AACD,GAPD;;AASA,aAAW,EAAX,CAAc,WAAd,EAA2B,UAAC,MAAD,EAAY;AACrC,QAAI,KAAK,MAAT,EAAiB,aAAG,aAAH,CAAoB,KAAK,MAAzB,WAA0C,KAAK,SAAL,CAAe,MAAf,CAA1C;AAClB,GAFD;;AAIA,cAAY,IAAZ,CAAiB,UAAjB,EAA6B,IAA7B,CAAkC,YAAlC;AACD;;AAED","file":"main.js","sourcesContent":["/**\n* Hercule\n* A simple markdown transclusion tool\n* Author: James Ramsay\n*/\n\nimport fs from 'fs';\nimport path from 'path';\nimport dashdash from 'dashdash';\nimport Transcluder from './transclude-stream';\n\nlet opts;\nlet args;\n\nconst parser = dashdash.createParser({\n  options: [\n    {\n      names: ['help', 'h'],\n      type: 'bool',\n      help: 'Print this help and exit.',\n    },\n    {\n      names: ['output', 'o'],\n      type: 'string',\n      help: 'File to output.',\n      helpArg: 'FILE',\n    },\n    // TODO: unit test transcludeStringSync with relativePath\n    {\n      names: ['relativePath', 'r'],\n      type: 'string',\n      help: 'Relative path. stdin will be parsed relative to this path.',\n    },\n    {\n      names: ['sourcemap', 's'],\n      type: 'bool',\n      help: 'Generate sourcemap for output file.',\n    },\n    {\n      name: 'reporter',\n      type: 'string',\n      help: 'Supported reporters include json, json-stderr, tree',\n    },\n  ],\n});\n\n\ntry {\n  opts = parser.parse(process.argv);\n  args = opts._args; // eslint-disable-line\n} catch (err) {\n  process.stderr.write(`hercule: error: ${err.message}\\n`);\n  process.exit(1);\n}\n\n\nif (opts.help) {\n  process.stdout.write('usage: hercule [OPTIONS] path/to/input.md\\n\\n');\n  process.stdout.write(`options:\\n${parser.help({ includeEnv: true }).trimRight()}\\n\\n`);\n  process.exit();\n}\n\n\nfunction main() {\n  let inputStream;\n  let outputStream;\n  let source;\n  const options = {\n    parents: [],\n    parentRefs: [],\n  };\n\n  if (args.length === 0) {\n    // Reading input from stdin\n    inputStream = process.stdin;\n    source = `${opts.relativePath}/stdin.md`;\n    options.relativePath = opts.relativePath;\n  } else {\n    // Reading input from file\n    source = path.normalize(args[0]);\n    inputStream = fs.createReadStream(source, { encoding: 'utf8' });\n  }\n\n  if (opts.output) {\n    // Writing output to file\n    outputStream = fs.createWriteStream(opts.output, { encoding: 'utf8' });\n    options.outputFile = opts.output;\n  } else {\n    // Writing output to stdout\n    outputStream = process.stdout;\n    options.outputFile = 'stdout';\n  }\n\n  const transclude = new Transcluder(source, options);\n\n  transclude.on('error', (err) => {\n    if (opts.reporter === 'json-err') {\n      process.stderr.write(JSON.stringify(err));\n    } else {\n      process.stderr.write(`\\n\\nERROR: ${err.message} (${err.path})\\n`);\n    }\n    process.exit(1);\n  });\n\n  transclude.on('sourcemap', (srcMap) => {\n    if (opts.output) fs.writeFileSync(`${opts.output}.map`, `${JSON.stringify(srcMap)}\\n`);\n  });\n\n  inputStream.pipe(transclude).pipe(outputStream);\n}\n\nmain();\n"]}