{"version":3,"sources":["../src/trim-stream.js"],"names":[],"mappings":";;;;;kBAYwB,U;;AAZxB;;;;;;;;;;;;;;;;AAYe,SAAS,UAAT,GAAsB;AACnC,MAAI,cAAc,EAAlB;;AAEA,WAAS,SAAT,CAAmB,KAAnB,EAA0B,QAA1B,EAAoC,EAApC,EAAwC;AACtC,QAAM,QAAQ,MAAM,QAAN,CAAe,MAAf,CAAd;;;AAGA,kBAAc,YAAY,MAAZ,CAAmB,KAAnB,CAAd;;;AAGA,QAAM,SAAS,YAAY,KAAZ,CAAkB,CAAlB,EAAqB,CAAC,CAAtB,CAAf,C;AACA,kBAAc,YAAY,KAAZ,CAAkB,CAAC,CAAnB,CAAd,C;;AAEA,SAAK,IAAL,CAAU,MAAV;AACA,WAAO,IAAP;AACD;;AAGD,WAAS,KAAT,CAAe,EAAf,EAAmB;;AAEjB,QAAI,gBAAgB,EAApB,EAAwB;AACtB,oBAAc,YAAY,OAAZ,CAAoB,KAApB,EAA2B,EAA3B,CAAd;AACA,WAAK,IAAL,CAAU,WAAV;AACD;;AAED,SAAK,IAAL,CAAU,IAAV;AACA,WAAO,IAAP;AACD;;AAED,SAAO,kBAAS,GAAT,CAAa,SAAb,EAAwB,KAAxB,CAAP;AACD","file":"trim-stream.js","sourcesContent":["import through2 from 'through2';\n\n/**\n* Trims new line at EOF to allow a file to be transcluded inline.\n* Multiple transclusions immediately before the end of file can also\n* result excessive new lines accumulating.\n*\n* Input stream: (string)\n*\n* Output stream: (string)\n*/\n\nexport default function TrimStream() {\n  let inputBuffer = '';\n\n  function transform(chunk, encoding, cb) {\n    const input = chunk.toString('utf8');\n\n    // Combine buffer and new input\n    inputBuffer = inputBuffer.concat(input);\n\n    // Return everything but the last character\n    const output = inputBuffer.slice(0, -1); // eslint-disable-line lodash/prefer-lodash-method\n    inputBuffer = inputBuffer.slice(-1); // eslint-disable-line lodash/prefer-lodash-method\n\n    this.push(output);\n    return cb();\n  }\n\n\n  function flush(cb) {\n    // Empty internal buffer and signal the end of the output stream.\n    if (inputBuffer !== '') {\n      inputBuffer = inputBuffer.replace(/\\n$/, '');\n      this.push(inputBuffer);\n    }\n\n    this.push(null);\n    return cb();\n  }\n\n  return through2.obj(transform, flush);\n}\n"]}