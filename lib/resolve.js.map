{"version":3,"sources":["../src/resolve.js"],"names":[],"mappings":";;;;;QASgB,iB,GAAA,iB;QAKA,e,GAAA,e;QAwCA,W,GAAA,W;;AAtDhB;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEO,SAAS,iBAAT,CAA2B,OAA3B,EAAoC,QAApC,EAA8C,UAA9C,EAA0D;AAC/D,MAAM,WAAW,iBAAE,IAAF,CAAO,UAAP,EAAmB,EAAE,aAAa,QAAQ,IAAvB,EAAnB,CAAjB;AACA,SAAO,YAAY,QAAZ,IAAwB,OAA/B;AACD;;AAEM,SAAS,eAAT,CAAyB,gBAAzB,EAA2C,YAA3C,EAAyD,MAAzD,QAAmF,EAAnF,EAAuF;AAAA,MAApB,IAAoB,QAApB,IAAoB;AAAA,MAAd,MAAc,QAAd,MAAc;;AAC5F,MAAI,mBAAJ;AACA,MAAI,iBAAJ;;AAEA,MAAI;AACF,iBAAa,2BAAkB,KAAlB,CAAwB,gBAAxB,CAAb;AACD,GAFD,CAEE,OAAO,EAAP,EAAW;AACX,WAAO,GAAG,EAAH,CAAP;AACD;;AAED,MAAM,gBAAgB,WAAW,OAAjC;AACA,MAAM,iBAAiB,WAAW,QAAlC;;AAEA,MAAM,UAAU,EAAE,MAAM,cAAc,KAAtB,EAA6B,0BAA7B,EAA2C,cAA3C,EAAmD,UAAnD,EAAyD,QAAQ,SAAS,cAAc,KAAxF,EAAhB;;AAEA,MAAI,cAAJ,EAAoB;AAClB,eAAW,EAAE,MAAM,eAAe,KAAvB,EAA8B,0BAA9B,EAA4C,cAA5C,EAAoD,UAApD,EAA0D,QAAQ,SAAS,eAAe,KAA1F,EAAX;AACD;;AAED,MAAM,mBAAmB,iBAAE,GAAF,CAAM,WAAW,UAAjB,EAA6B;AAAA,QAAG,WAAH,SAAG,WAAH;AAAA,QAAgB,IAAhB,SAAgB,IAAhB;AAAA,WACpD,EAAE,wBAAF,EAAe,MAAM,KAAK,KAA1B,EAAiC,0BAAjC,EAA+C,cAA/C,EAAuD,UAAvD,EAA6D,QAAQ,SAAS,KAAK,KAAnF,EADoD;AAAA,GAA7B,CAAzB;;AAIA,SAAO,GAAG,IAAH,EAAS,OAAT,EAAkB,QAAlB,EAA4B,gBAA5B,CAAP;AACD;;;;;;;;;;;;;;;;AAgBM,SAAS,WAAT,QAAmE,EAAnE,EAAuE;AAAA,MAAhD,IAAgD,SAAhD,IAAgD;AAAA,MAA1C,YAA0C,SAA1C,YAA0C;AAAA,MAA5B,MAA4B,SAA5B,MAA4B;AAAA,MAApB,IAAoB,SAApB,IAAoB;AAAA,MAAd,MAAc,SAAd,MAAc;;AAC5E,MAAI,QAAQ,EAAZ;AACA,MAAI,iBAAJ;AACA,MAAI,qBAAJ;AACA,MAAI,6BAAJ;;AAEA,MAAI;AACF,eAAW,qBAAY,KAAZ,CAAkB,IAAlB,CAAX;AACD,GAFD,CAEE,OAAO,GAAP,EAAY;AACZ,WAAO,GAAG,EAAE,QAAF,EAAO,SAAS,0BAAhB,EAA4C,MAAM,IAAlD,EAAH,CAAP;AACD;;AAED,MAAI,aAAa,QAAjB,EAA2B;AACzB,YAAQ,sBAAe,IAAf,EAAqB,MAArB,EAA6B,IAA7B,EAAmC,MAAnC,CAAR;AACD;;AAED,MAAI,aAAa,OAAjB,EAA0B;AACxB,mBAAe,eAAK,IAAL,CAAU,YAAV,EAAwB,IAAxB,CAAf;AACA,2BAAuB,eAAK,OAAL,CAAa,YAAb,CAAvB;AACA,YAAQ,qBAAc,YAAd,CAAR;AACD;AACD,MAAI,aAAa,MAAjB,EAAyB;AACvB,mBAAe,IAAf;AACA,2BAAuB,IAAvB;AACA,YAAQ,oBAAa,YAAb,CAAR;AACD;;AAED,SAAO,GAAG,IAAH,EAAS,KAAT,EAAgB,YAAhB,EAA8B,oBAA9B,CAAP;AACD","file":"resolve.js","sourcesContent":["import path from 'path';\nimport _ from 'lodash';\n\nimport stringInflater from './inflaters/string';\nimport localInflater from './inflaters/local';\nimport httpInflater from './inflaters/http';\n\nimport { linkGrammar, transcludeGrammar } from './grammar';\n\nexport function resolveReferences(primary, fallback, references) {\n  const override = _.find(references, { placeholder: primary.link });\n  return override || fallback || primary;\n}\n\nexport function parseTransclude(transclusionLink, relativePath, source, { line, column }, cb) {\n  let parsedLink;\n  let fallback;\n\n  try {\n    parsedLink = transcludeGrammar.parse(transclusionLink);\n  } catch (ex) {\n    return cb(ex);\n  }\n\n  const parsedPrimary = parsedLink.primary;\n  const parsedFallback = parsedLink.fallback;\n\n  const primary = { link: parsedPrimary.match, relativePath, source, line, column: column + parsedPrimary.index };\n\n  if (parsedFallback) {\n    fallback = { link: parsedFallback.match, relativePath, source, line, column: column + parsedFallback.index };\n  }\n\n  const parsedReferences = _.map(parsedLink.references, ({ placeholder, link }) => (\n    { placeholder, link: link.match, relativePath, source, line, column: column + link.index }\n  ));\n\n  return cb(null, primary, fallback, parsedReferences);\n}\n\n// FIXME: link.link is stupid!\n/**\n * resolveLink() Resolves a link to a readable stream for transclusion.\n *\n * @param {Object} link - Link will be resolved and contents returned as a readable stream\n * @param {string} link.link - Path to the target file relative to the from the source of the link\n * @param {string} link.relativePath - Directory name of the source file where the link originated.\n *   The relative path is not derived from the source to isolate path handling to this function.\n * @param {string} link.source - Absolute path of the source file\n * @param {number} link.line - Location of the of the link in the source file\n * @param {number} link.column - Location of the of the link in the source file\n * @param {resolveLinkCallback} cb - callback\n * @returns {function} cb\n */\nexport function resolveLink({ link, relativePath, source, line, column }, cb) {\n  let input = '';\n  let linkType;\n  let resolvedLink;\n  let resolvedRelativePath;\n\n  try {\n    linkType = linkGrammar.parse(link);\n  } catch (err) {\n    return cb({ err, message: 'Link could not be parsed', path: link });\n  }\n\n  if (linkType === 'string') {\n    input = stringInflater(link, source, line, column);\n  }\n\n  if (linkType === 'local') {\n    resolvedLink = path.join(relativePath, link);\n    resolvedRelativePath = path.dirname(resolvedLink);\n    input = localInflater(resolvedLink);\n  }\n  if (linkType === 'http') {\n    resolvedLink = link;\n    resolvedRelativePath = link;\n    input = httpInflater(resolvedLink);\n  }\n\n  return cb(null, input, resolvedLink, resolvedRelativePath);\n}\n\n/**\n * Resolved link callback\n *\n * @callback resolveLinkCallback\n * @param {Object} error - Error object\n * @param {Object} input - Readable stream object which will be processed for transculsion\n * @param {string} absolutePath - Absolute path of the link permits checking for circular dependencies\n * @param {string} dirname - Directory name of the path to the file or equivalent permits handling of relative links\n */\n"]}