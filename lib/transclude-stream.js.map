{"version":3,"sources":["../src/transclude-stream.js"],"names":[],"mappings":";;;;;kBAyBwB,W;;AAzBxB;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;AAQA,IAAM,kBAAkB;AACtB,SAAO,MADe;AAEtB,UAAQ,SAFc;AAGtB,UAAQ;AAHc,CAAxB;;;AAOe,SAAS,WAAT,GAA4C;AAAA,MAAvB,MAAuB,yDAAd,OAAc;AAAA,MAAL,GAAK;;AACzD,MAAM,UAAU,iBAAE,KAAF,CAAQ,EAAR,EAAY,eAAZ,EAA6B,EAAE,cAAc,eAAK,OAAL,CAAa,MAAb,CAAhB,EAA7B,EAAqE,GAArE,CAAhB;;;AAGA,MAAM,aAAa,iBAAE,GAAF,CAAM,OAAN,EAAe,YAAf,CAAnB;AACA,MAAI,kBAAJ;;AAEA,WAAS,KAAT,CAAe,KAAf,EAAsB;AACpB,WAAO,0BAAa,KAAb,EAAoB,OAApB,CAAP;AACD;;AAED,WAAS,SAAT,CAAmB,KAAnB,EAA0B;AACxB,WAAO,8BAAiB,KAAjB,EAAwB,OAAxB,CAAP;AACD;;AAED,MAAM,aAAa,iBAAE,GAAF,CAAM,OAAN,EAAe,YAAf,+BAAnB;AACA,MAAM,mBAAmB;AACvB,8CADuB;AAEvB,gBAFuB;AAGvB;AAHuB,GAAzB;AAKA,MAAM,kBAAkB;AACtB,gBAAY,QAAQ,UADE;AAEtB,eAAW,QAAQ,SAFG;AAGtB,iBAAa,QAAQ;AAHC,GAAxB;;AAMA,MAAM,YAAY,qCAAgB,gBAAhB,EAAkC,UAAlC,CAAlB;AACA,MAAM,WAAW,4BAAkB,MAAlB,EAA0B,eAA1B,CAAjB;AACA,MAAM,WAAW,4BAAjB;AACA,MAAM,YAAY,8BAAoB,UAApB,CAAlB;AACA,MAAM,YAAY,2BAAI,SAAJ,CAAlB;;AAEA,YACC,IADD,CACM,QADN,EAEC,IAFD,CAEM,QAFN,EAGC,IAHD,CAGM,SAHN,EAIC,IAJD,CAIM,SAJN;;AAMA,MAAM,cAAc,wBAAS,SAAT,EAAoB,SAApB,CAApB;;AAEA,WAAS,EAAT,CAAY,OAAZ,EAAqB,UAAC,GAAD,EAAS;AAC5B,gBAAY,IAAZ,CAAiB,OAAjB,EAA0B,GAA1B;AACA,aAAS,GAAT;AACD,GAHD;;AAKA,YAAU,EAAV,CAAa,WAAb,EAA0B,UAAC,kBAAD,EAAwB;AAChD,gBAAY,kBAAZ;AACD,GAFD;;AAIA,cAAY,EAAZ,CAAe,KAAf,EAAsB,YAAM;AAC1B,gBAAY,IAAZ,CAAiB,SAAjB,EAA4B,UAAU,OAAtC;AACA,gBAAY,IAAZ,CAAiB,WAAjB,EAA8B,SAA9B;AACD,GAHD;;AAKA,SAAO,WAAP;AACD","file":"transclude-stream.js","sourcesContent":["import path from 'path';\n\nimport _ from 'lodash';\nimport duplexer from 'duplexer2';\nimport get from 'through2-get';\nimport regexpTokenizer from 'regexp-stream-tokenizer';\n\nimport ResolveStream from './resolve-stream';\nimport IndentStream from './indent-stream';\nimport SourceMapStream from './source-map-stream';\nimport { defaultTokenRegExp, defaultToken, defaultSeparator, WHITESPACE_GROUP } from './config';\n\n/**\n* Input stream: string\n*\n* Output stream: string\n*/\n\nconst DEFAULT_OPTIONS = {\n  input: 'link',\n  output: 'content',\n  source: 'string',\n};\n\n// The sourceFile should be relative to the sourcePath\nexport default function Transcluder(source = 'local', opt) {\n  const options = _.merge({}, DEFAULT_OPTIONS, { relativePath: path.dirname(source) }, opt);\n\n  // Sourcemap\n  const outputFile = _.get(options, 'outputFile');\n  let sourceMap;\n\n  function token(match) {\n    return defaultToken(match, options);\n  }\n\n  function separator(match) {\n    return defaultSeparator(match, options);\n  }\n\n  const linkRegExp = _.get(options, 'linkRegExp') || defaultTokenRegExp;\n  const tokenizerOptions = {\n    leaveBehind: `${WHITESPACE_GROUP}`,\n    token,\n    separator,\n  };\n  const resolverOptions = {\n    linkRegExp: options.linkRegExp,\n    linkMatch: options.linkMatch,\n    resolveLink: options.resolveLink,\n  };\n\n  const tokenizer = regexpTokenizer(tokenizerOptions, linkRegExp);\n  const resolver = new ResolveStream(source, resolverOptions);\n  const indenter = new IndentStream();\n  const sourcemap = new SourceMapStream(outputFile);\n  const stringify = get('content');\n\n  tokenizer\n  .pipe(resolver)\n  .pipe(indenter)\n  .pipe(sourcemap)\n  .pipe(stringify);\n\n  const transcluder = duplexer(tokenizer, stringify);\n\n  resolver.on('error', (err) => {\n    transcluder.emit('error', err);\n    resolver.end();\n  });\n\n  sourcemap.on('sourcemap', (generatedSourceMap) => {\n    sourceMap = generatedSourceMap;\n  });\n\n  transcluder.on('end', () => {\n    transcluder.emit('sources', sourceMap.sources);\n    transcluder.emit('sourcemap', sourceMap);\n  });\n\n  return transcluder;\n}\n"]}