{"version":3,"sources":["../../src/inflaters/http.js"],"names":[],"mappings":";;;;;kBAWwB,O;;AAXxB;;;;AACA;;;;AACA;;;;;;;;;;;;;AASe,SAAS,OAAT,CAAiB,IAAjB,EAAuB;AACpC,MAAM,aAAa,0BAAnB;AACA,MAAM,eAAe,kBAAQ,GAAR,CAAY,IAAZ,CAArB;;;AAGA,eAAa,EAAb,CAAgB,UAAhB,EAA4B,SAAS,KAAT,CAAe,GAAf,EAAoB;AAC9C,QAAI,IAAI,UAAJ,KAAmB,GAAvB,EAA4B,KAAK,IAAL,CAAU,OAAV,EAAmB,EAAE,SAAS,qBAAX,EAAkC,MAAM,IAAxC,EAAnB;AAC7B,GAFD;;AAIA,eAAa,IAAb,CAAkB,UAAlB;;;AAGA,MAAM,eAAe,wBAAS,EAAE,YAAY,IAAd,EAAT,EAA+B,YAA/B,EAA6C,UAA7C,CAArB;;AAEA,SAAO,YAAP;AACD","file":"http.js","sourcesContent":["import request from 'request';\nimport duplexer from 'duplexer2';\nimport TrimStream from '../trim-stream';\n\n/**\n * inflate() returns a readable stream of the file excluding the terminating <newline> character of the last line.\n * This permits inline and in-paragraph transclusion as some aspects of markdown are sensitive to newlines.\n *\n * @param {string} link - HTTP path to the file to be transcluded\n * @return {Object} outputStream - Readable stream object\n */\nexport default function inflate(link) {\n  const trimStream = new TrimStream();\n  const remoteStream = request.get(link);\n\n  // Manually trigger error since 2XX respsonse doesn't trigger error despite not having expected content\n  remoteStream.on('response', function error(res) {\n    if (res.statusCode !== 200) this.emit('error', { message: 'Could not read file', path: link });\n  });\n\n  remoteStream.pipe(trimStream);\n\n  // duplexer bubbles errors automatically for convenience\n  const outputStream = duplexer({ objectMode: true }, remoteStream, trimStream);\n\n  return outputStream;\n}\n"]}