{"version":3,"sources":["../../src/inflaters/local.js"],"names":[],"mappings":";;;;;kBAWwB,O;;AAXxB;;;;AACA;;;;AACA;;;;;;;;;;;;;AASe,SAAS,OAAT,CAAiB,IAAjB,EAAuB;AACpC,MAAM,aAAa,0BAAnB;AACA,MAAM,cAAc,aAAG,gBAAH,CAAoB,IAApB,EAA0B,EAAE,UAAU,MAAZ,EAA1B,CAApB;;AAEA,cAAY,IAAZ,CAAiB,UAAjB;;;AAGA,MAAM,eAAe,wBAAS,EAAE,YAAY,IAAd,EAAT,EAA+B,WAA/B,EAA4C,UAA5C,CAArB;;AAEA,SAAO,YAAP;AACD","file":"local.js","sourcesContent":["import fs from 'fs';\nimport duplexer from 'duplexer2';\nimport TrimStream from '../trim-stream';\n\n/**\n * inflate() returns a readable stream of the file excluding the terminating <newline> character of the last line.\n * This permits inline and in-paragraph transclusion as some aspects of markdown are sensitive to newlines.\n *\n * @param {string} link - Absolute path to the file to be transcluded\n * @return {object} outputStream - Readable stream object\n */\nexport default function inflate(link) {\n  const trimStream = new TrimStream();\n  const localStream = fs.createReadStream(link, { encoding: 'utf8' });\n\n  localStream.pipe(trimStream);\n\n  // duplexer bubbles errors automatically for convenience\n  const outputStream = duplexer({ objectMode: true }, localStream, trimStream);\n\n  return outputStream;\n}\n"]}